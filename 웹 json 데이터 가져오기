1. using
using 문은 3가지 주요 기능을 수행한다.

- 리소스 할당 및 해제
해당 객체를 어디서부터 어디까지만 사용할 것인지 명시하는 것이 using의 역할이다.
그렇기 때문에 using() { } 이후 부터는, 객체 t를 사용할 수 없다. 코드 블록이 종료되면 using문이 종료되며 리소스가 자동으로 해제된다.
할당된 메모리를 해제해버렸고, 그 때문에 Dispose()도 실행된 것이다.

* 중요 데이터와 메모리를 얼른 쓰고 돌려주어야 할 때, 다른 프로세스와의 교착상태를 방지하고자 할 때, 유용하게 쓰인다.

- 예외 처리: 
using 문을 사용하면 리소스 사용 중에 예외가 발생할 경우에도 해당 리소스가 올바르게 해제됩니다. 
using 블록을 빠져나오는 동안에도 예외가 발생하면 해당 예외는 Dispose() 메서드가 호출될 때 리소스 해제 전에 먼저 발생합니다. 
이를 통해 리소스가 올바르게 정리되어 메모리 누수를 방지할 수 있습니다.

- 리소스 자동 해제: 
using 문을 사용하면 개발자가 명시적으로 리소스를 해제하지 않아도 됩니다. 
리소스를 사용하는 코드 블록이 끝나면 Dispose() 메서드가 호출되어 리소스가 자동으로 해제됩니다.

=>HttpClient는 IDisposable 인터페이스를 구현하고 있으며, 네트워크 리소스를 사용하는 경우이기 때문에 using문을 사용하여 해당 리소스를 관리하는 것이 좋다.
따라서 using (HttpClient client = new HttpClient())코드는 HttpClient 인스턴스를 생성하고 사용한 후에 자동으로 정리하는 데 사용된다.

2. HttpClient 자료형
